/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package net.alliedmods.lang.sourcepawn.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import org.jetbrains.annotations.NotNull;

import java.util.concurrent.CopyOnWriteArrayList;

import static net.alliedmods.lang.sourcepawn.lexer.SpTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>SpPreprocessorLexer.flex</tt>
 */
class _SpPreprocessorLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PREPROCESSOR = 2;
  public static final int STRING = 4;
  public static final int RAW_STRING = 6;
  public static final int HARD_STRING = 8;
  public static final int CHARACTER = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\1\107\1\110\1\2\22\0\1\1\1\62\1\106\1\25\1\0\1\71\1\67\1\105"+
    "\1\72\1\73\1\11\1\64\1\100\1\24\1\22\1\10\1\15\1\12\1\54\1\53\1\55\1\13\1"+
    "\52\1\13\1\51\1\5\1\103\1\104\1\65\1\61\1\66\1\102\1\6\6\14\24\7\1\76\1\4"+
    "\1\77\1\70\1\17\1\0\1\26\1\16\1\41\1\32\1\23\1\33\1\43\1\50\1\34\1\57\1\47"+
    "\1\36\1\44\1\35\1\20\1\37\1\46\1\30\1\27\1\31\1\40\1\56\1\42\1\21\1\45\1\60"+
    "\1\74\1\63\1\75\1\101\6\0\1\107\242\0\2\107\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\3\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\3\1\5\1\10\1\5\1\11\1\5\1\12"+
    "\1\13\20\5\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\13\42\1\43\1\44\1\43\1\45\1\43\1\46\1\43"+
    "\2\47\1\50\1\51\1\52\1\0\2\53\1\3\1\0"+
    "\1\54\1\55\1\56\1\57\3\3\5\5\1\60\3\5"+
    "\1\61\1\62\1\63\13\5\1\64\5\5\1\65\1\66"+
    "\26\5\1\67\1\0\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\7\0\1\107\5\0\2\110\2\43\1\0"+
    "\1\111\1\112\1\55\1\113\5\5\1\114\21\5\1\115"+
    "\7\5\1\116\3\5\1\117\1\5\1\120\3\5\1\121"+
    "\22\5\1\122\2\5\1\123\1\124\1\125\1\126\16\0"+
    "\2\113\5\5\1\127\1\5\1\130\1\131\14\5\1\132"+
    "\2\5\1\133\4\5\1\134\6\5\1\135\1\136\6\5"+
    "\1\137\12\5\1\140\2\5\1\141\1\142\1\5\1\143"+
    "\1\5\1\144\4\5\1\145\3\0\1\146\3\0\1\147"+
    "\1\0\1\150\3\0\1\112\1\0\1\55\1\0\1\151"+
    "\10\5\1\152\3\5\1\153\3\5\1\154\3\5\1\155"+
    "\11\5\1\156\1\5\1\157\1\160\10\5\1\161\1\5"+
    "\1\162\1\163\2\5\1\164\1\165\3\5\1\166\1\167"+
    "\5\5\1\170\1\0\1\171\7\0\1\172\1\0\2\5"+
    "\1\173\2\5\1\174\1\5\1\175\1\176\1\177\1\200"+
    "\1\201\1\5\1\202\1\203\2\5\1\204\2\5\1\205"+
    "\7\5\1\206\1\5\1\207\4\5\1\210\1\211\1\212"+
    "\1\213\10\5\2\0\1\214\1\215\1\0\1\216\1\0"+
    "\1\217\1\0\1\220\3\5\1\221\1\5\1\222\1\223"+
    "\1\224\1\225\1\226\1\227\1\230\1\5\1\231\4\5"+
    "\1\232\1\5\1\233\1\5\1\234\1\235\2\5\1\236"+
    "\1\237\1\240\3\0\1\241\1\242\1\5\1\243\1\244"+
    "\1\245\1\246\1\247\1\5\1\250\2\5\1\251\1\5"+
    "\1\252\1\0\1\253\1\0\1\5\1\254\1\255\1\256"+
    "\1\257\1\260\1\0\1\5\1\261\1\5\1\262";

  private static int [] zzUnpackAction() {
    int [] result = new int[549];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u01b6\0\u0291\0\u02da\0\u0323\0\u0323\0\u036c\0\u03b5"+
    "\0\u03fe\0\u0447\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u01b6"+
    "\0\u05fd\0\u0646\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc"+
    "\0\u0845\0\u088e\0\u08d7\0\u0920\0\u0969\0\u09b2\0\u09fb\0\u0a44"+
    "\0\u0a8d\0\u0ad6\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa\0\u0c43\0\u0c8c"+
    "\0\u0cd5\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u01b6"+
    "\0\u01b6\0\u01b6\0\u0d1e\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u0d67"+
    "\0\u0db0\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d\0\u0f66\0\u0faf"+
    "\0\u0ff8\0\u1041\0\u01b6\0\u108a\0\u01b6\0\u01b6\0\u01b6\0\u10d3"+
    "\0\u01b6\0\u111c\0\u01b6\0\u01b6\0\u01b6\0\u0291\0\u1165\0\u11ae"+
    "\0\u11f7\0\u1240\0\u1289\0\u12d2\0\u01b6\0\u01b6\0\u131b\0\u1364"+
    "\0\u13ad\0\u13f6\0\u143f\0\u1488\0\u14d1\0\u151a\0\u1563\0\u15ac"+
    "\0\u15f5\0\u163e\0\u01b6\0\u01b6\0\u1687\0\u16d0\0\u1719\0\u1762"+
    "\0\u17ab\0\u17f4\0\u183d\0\u1886\0\u18cf\0\u1918\0\u1961\0\u19aa"+
    "\0\u19f3\0\u1a3c\0\u1a85\0\u1ace\0\u1b17\0\u1b60\0\u0323\0\u1ba9"+
    "\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd\0\u1d16\0\u1d5f\0\u1da8\0\u1df1"+
    "\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039"+
    "\0\u2082\0\u20cb\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u01b6\0\u2238"+
    "\0\u2238\0\u2238\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u2281"+
    "\0\u01b6\0\u22ca\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u2313"+
    "\0\u235c\0\u23a5\0\u23ee\0\u2437\0\u2480\0\u24c9\0\u01b6\0\u2512"+
    "\0\u255b\0\u25a4\0\u25ed\0\u2636\0\u01b6\0\u10d3\0\u267f\0\u26c8"+
    "\0\u10d3\0\u01b6\0\u2711\0\u275a\0\u27a3\0\u27ec\0\u2835\0\u287e"+
    "\0\u28c7\0\u2910\0\u01b6\0\u2959\0\u29a2\0\u29eb\0\u2a34\0\u2a7d"+
    "\0\u2ac6\0\u2b0f\0\u2b58\0\u2ba1\0\u2bea\0\u2c33\0\u2c7c\0\u2cc5"+
    "\0\u2d0e\0\u2d57\0\u2da0\0\u2de9\0\u0323\0\u2e32\0\u2e7b\0\u2ec4"+
    "\0\u2f0d\0\u2f56\0\u2f9f\0\u2fe8\0\u3031\0\u307a\0\u30c3\0\u310c"+
    "\0\u3155\0\u319e\0\u0323\0\u31e7\0\u3230\0\u3279\0\u0323\0\u32c2"+
    "\0\u330b\0\u3354\0\u339d\0\u33e6\0\u342f\0\u3478\0\u34c1\0\u350a"+
    "\0\u3553\0\u359c\0\u35e5\0\u362e\0\u3677\0\u36c0\0\u3709\0\u3752"+
    "\0\u379b\0\u37e4\0\u382d\0\u3876\0\u01b6\0\u01b6\0\u01b6\0\u38bf"+
    "\0\u3908\0\u3951\0\u399a\0\u39e3\0\u3a2c\0\u3a75\0\u3abe\0\u3b07"+
    "\0\u3b50\0\u3b99\0\u3be2\0\u3c2b\0\u3c74\0\u3cbd\0\u3d06\0\u01b6"+
    "\0\u3d4f\0\u3d98\0\u3de1\0\u3e2a\0\u3e73\0\u0323\0\u3ebc\0\u0323"+
    "\0\u0323\0\u3f05\0\u3f4e\0\u3f97\0\u3fe0\0\u4029\0\u4072\0\u40bb"+
    "\0\u4104\0\u414d\0\u4196\0\u41df\0\u4228\0\u0323\0\u4271\0\u42ba"+
    "\0\u0323\0\u4303\0\u434c\0\u4395\0\u43de\0\u0323\0\u4427\0\u4470"+
    "\0\u44b9\0\u4502\0\u454b\0\u4594\0\u0323\0\u0323\0\u45dd\0\u4626"+
    "\0\u466f\0\u46b8\0\u4701\0\u474a\0\u0323\0\u4793\0\u47dc\0\u4825"+
    "\0\u486e\0\u48b7\0\u4900\0\u4949\0\u4992\0\u49db\0\u4a24\0\u0323"+
    "\0\u4a6d\0\u4ab6\0\u0323\0\u0323\0\u4aff\0\u0323\0\u4b48\0\u0323"+
    "\0\u4b91\0\u4bda\0\u4c23\0\u4c6c\0\u01b6\0\u4cb5\0\u4cfe\0\u4d47"+
    "\0\u4d90\0\u4dd9\0\u4e22\0\u4e6b\0\u01b6\0\u4eb4\0\u01b6\0\u4efd"+
    "\0\u4f46\0\u4f8f\0\u4fd8\0\u4fd8\0\u01b6\0\u5021\0\u0323\0\u506a"+
    "\0\u50b3\0\u50fc\0\u5145\0\u518e\0\u51d7\0\u5220\0\u5269\0\u0323"+
    "\0\u52b2\0\u52fb\0\u5344\0\u0323\0\u538d\0\u53d6\0\u541f\0\u0323"+
    "\0\u5468\0\u54b1\0\u54fa\0\u0323\0\u5543\0\u558c\0\u55d5\0\u561e"+
    "\0\u5667\0\u56b0\0\u56f9\0\u5742\0\u578b\0\u0323\0\u57d4\0\u0323"+
    "\0\u0323\0\u581d\0\u5866\0\u58af\0\u58f8\0\u5941\0\u598a\0\u59d3"+
    "\0\u5a1c\0\u0323\0\u5a65\0\u0323\0\u0323\0\u5aae\0\u5af7\0\u0323"+
    "\0\u0323\0\u5b40\0\u5b89\0\u5bd2\0\u0323\0\u0323\0\u5c1b\0\u5c64"+
    "\0\u5cad\0\u5cf6\0\u5d3f\0\u01b6\0\u5d88\0\u01b6\0\u5dd1\0\u5e1a"+
    "\0\u5e63\0\u5eac\0\u5ef5\0\u5f3e\0\u5f87\0\u01b6\0\u5fd0\0\u6019"+
    "\0\u6062\0\u0323\0\u60ab\0\u60f4\0\u0323\0\u613d\0\u0323\0\u0323"+
    "\0\u0323\0\u0323\0\u0323\0\u6186\0\u0323\0\u0323\0\u61cf\0\u6218"+
    "\0\u0323\0\u6261\0\u62aa\0\u0323\0\u62f3\0\u633c\0\u6385\0\u63ce"+
    "\0\u6417\0\u6460\0\u64a9\0\u0323\0\u64f2\0\u0323\0\u653b\0\u6584"+
    "\0\u65cd\0\u6616\0\u0323\0\u0323\0\u0323\0\u0323\0\u665f\0\u66a8"+
    "\0\u66f1\0\u673a\0\u6783\0\u67cc\0\u6815\0\u685e\0\u68a7\0\u68f0"+
    "\0\u01b6\0\u01b6\0\u6939\0\u01b6\0\u6982\0\u01b6\0\u69cb\0\u0323"+
    "\0\u6a14\0\u6a5d\0\u6aa6\0\u0323\0\u6aef\0\u0323\0\u0323\0\u0323"+
    "\0\u0323\0\u0323\0\u0323\0\u0323\0\u6b38\0\u0323\0\u6b81\0\u6bca"+
    "\0\u6c13\0\u6c5c\0\u0323\0\u6ca5\0\u0323\0\u6cee\0\u0323\0\u0323"+
    "\0\u6d37\0\u6d80\0\u0323\0\u0323\0\u0323\0\u6dc9\0\u6e12\0\u6e5b"+
    "\0\u01b6\0\u01b6\0\u6ea4\0\u0323\0\u0323\0\u0323\0\u0323\0\u0323"+
    "\0\u6eed\0\u0323\0\u6f36\0\u6f7f\0\u0323\0\u6fc8\0\u0323\0\u7011"+
    "\0\u01b6\0\u705a\0\u70a3\0\u0323\0\u0323\0\u0323\0\u0323\0\u01b6"+
    "\0\u70ec\0\u7135\0\u01b6\0\u717e\0\u0323";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[549];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\2\14\1\16\1\21\1\22\1\23\1\24"+
    "\1\16\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\4\16\5\14\1\50\2\16"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\7\1\10"+
    "\23\77\1\100\2\77\1\101\2\77\1\102\1\103\1\104"+
    "\1\105\1\77\1\106\1\107\1\110\1\77\1\111\46\77"+
    "\2\112\2\113\1\114\101\112\1\115\2\112\2\116\2\117"+
    "\1\120\101\116\1\117\2\116\62\121\1\122\23\121\1\123"+
    "\2\121\2\112\2\124\1\114\100\112\1\125\3\112\112\0"+
    "\1\10\106\0\1\10\3\0\1\12\106\0\1\126\1\127"+
    "\1\130\104\0\1\126\5\0\1\131\4\0\2\131\1\0"+
    "\1\131\1\0\1\131\2\0\1\132\26\0\5\131\40\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\33\16\40\0"+
    "\1\133\1\134\47\0\1\135\110\0\1\136\34\0\1\131"+
    "\4\0\2\131\1\0\1\131\1\137\1\131\1\140\1\141"+
    "\1\132\26\0\5\131\40\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\2\16\1\142\7\16\1\143\20\16\35\0"+
    "\3\16\2\0\5\16\1\144\2\16\1\0\1\16\2\0"+
    "\33\16\35\0\3\16\2\0\4\16\1\145\3\16\1\0"+
    "\1\16\2\0\11\16\1\146\21\16\52\0\1\147\73\0"+
    "\3\16\2\0\7\16\1\150\1\0\1\16\2\0\7\16"+
    "\1\151\1\152\22\16\54\0\1\153\34\0\1\154\34\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\1\16\1\155"+
    "\11\16\1\156\17\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\157\2\0\3\16\1\160\2\16\1\161\1\16\1\162"+
    "\3\16\1\163\16\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\164\2\0\33\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\1\165\1\16\1\166\14\16\1\167\2\16"+
    "\1\170\10\16\35\0\3\16\2\0\6\16\1\171\1\16"+
    "\1\0\1\172\2\0\33\16\35\0\3\16\2\0\6\16"+
    "\1\173\1\16\1\0\1\16\2\0\1\174\5\16\1\175"+
    "\3\16\1\176\20\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\5\16\1\177\1\16\1\200\6\16\1\201"+
    "\14\16\35\0\3\16\2\0\10\16\1\0\1\202\2\0"+
    "\1\203\11\16\1\204\20\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\205\2\0\33\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\1\206\1\16\1\207\7\16\1\210"+
    "\20\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\1\16\1\211\4\16\1\212\1\213\23\16\35\0\3\16"+
    "\2\0\6\16\1\214\1\16\1\0\1\215\2\0\1\216"+
    "\21\16\1\217\10\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\6\16\1\220\13\16\1\221\10\16\35\0"+
    "\3\16\2\0\6\16\1\222\1\16\1\0\1\16\2\0"+
    "\33\16\35\0\3\16\2\0\10\16\1\0\1\223\2\0"+
    "\33\16\35\0\3\16\2\0\6\16\1\224\1\16\1\0"+
    "\1\16\2\0\1\225\5\16\1\226\24\16\111\0\1\227"+
    "\27\0\2\230\2\0\55\230\1\231\24\230\1\232\63\0"+
    "\1\233\1\0\1\234\106\0\1\235\2\0\1\236\105\0"+
    "\1\237\3\0\1\240\104\0\1\241\4\0\1\242\103\0"+
    "\1\243\5\0\1\244\102\0\1\245\110\0\1\246\132\0"+
    "\1\247\35\0\1\250\4\0\1\251\1\252\101\0\1\253"+
    "\111\0\1\254\103\0\1\255\121\0\1\256\107\0\1\257"+
    "\1\0\1\260\107\0\1\261\104\0\1\262\115\0\1\263"+
    "\101\0\1\264\62\0\2\265\2\0\106\265\1\266\1\267"+
    "\1\270\104\265\1\266\1\0\1\271\1\267\1\270\104\0"+
    "\1\271\106\0\1\272\3\0\1\130\1\0\1\130\104\0"+
    "\1\130\1\0\1\130\106\0\1\130\5\0\1\131\4\0"+
    "\2\131\1\0\1\131\1\0\1\131\31\0\5\131\40\0"+
    "\1\273\4\0\2\273\1\0\1\273\33\0\5\273\33\0"+
    "\2\133\2\0\105\133\11\274\1\275\77\274\12\0\1\137"+
    "\2\0\1\137\1\0\1\137\103\0\2\140\1\0\1\140"+
    "\1\0\1\140\32\0\4\140\40\0\1\141\4\0\6\141"+
    "\3\0\1\141\2\0\1\141\3\0\2\141\5\0\1\141"+
    "\7\0\5\141\40\0\3\16\2\0\10\16\1\0\1\276"+
    "\2\0\33\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\6\16\1\277\24\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\7\16\1\300\23\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\31\16\1\301\1\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\302\2\0\33\16"+
    "\52\0\1\303\73\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\6\16\1\304\2\16\1\305\21\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\12\16\1\306\20\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\1\16"+
    "\1\307\31\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\1\16\1\310\31\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\20\16\1\311\12\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\1\312\32\16\35\0"+
    "\3\16\2\0\6\16\1\313\1\16\1\0\1\16\2\0"+
    "\1\314\1\16\1\315\30\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\32\16\1\316\35\0\3\16\2\0"+
    "\10\16\1\0\1\317\2\0\33\16\35\0\3\16\2\0"+
    "\10\16\1\0\1\16\2\0\6\16\1\320\24\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\1\321\2\16"+
    "\1\322\27\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\15\16\1\323\15\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\12\16\1\324\4\16\1\325\13\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\11\16"+
    "\1\326\21\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\2\16\1\327\3\16\1\330\24\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\12\16\1\331\20\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\5\16"+
    "\1\332\2\16\1\333\2\16\1\334\17\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\2\16\1\335\30\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\10\16"+
    "\1\336\22\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\7\16\1\337\23\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\7\16\1\340\23\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\3\16\1\341\27\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\11\16"+
    "\1\342\21\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\14\16\1\343\16\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\3\16\1\344\12\16\1\345\14\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\10\16"+
    "\1\346\22\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\3\16\1\347\27\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\13\16\1\350\17\16\35\0\3\16"+
    "\2\0\6\16\1\351\1\16\1\0\1\16\2\0\6\16"+
    "\1\352\24\16\35\0\3\16\2\0\4\16\1\353\3\16"+
    "\1\0\1\16\2\0\33\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\6\16\1\354\24\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\7\16\1\355\23\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\6\16"+
    "\1\356\24\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\7\16\1\357\23\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\10\16\1\360\22\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\1\16\1\361\1\16"+
    "\1\362\27\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\1\363\32\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\3\16\1\364\27\16\35\0\3\16\2\0"+
    "\10\16\1\0\1\16\2\0\6\16\1\365\24\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\3\16\1\366"+
    "\27\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\3\16\1\367\27\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\6\16\1\370\1\16\1\371\22\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\2\16\1\372"+
    "\30\16\35\0\3\16\2\0\10\16\1\0\1\373\2\0"+
    "\2\16\1\374\30\16\136\0\1\375\63\0\1\376\110\0"+
    "\1\377\4\0\1\u0100\52\0\1\u0101\112\0\1\u0102\105\0"+
    "\1\u0103\110\0\1\u0104\126\0\1\u0105\76\0\1\u0106\113\0"+
    "\1\u0107\113\0\1\u0108\104\0\1\u0109\101\0\1\u010a\114\0"+
    "\1\u010b\106\0\1\u010c\61\0\1\270\1\0\1\270\104\0"+
    "\1\270\1\0\1\270\106\0\1\270\23\0\1\u010d\65\0"+
    "\11\274\1\u010e\77\274\10\u010f\1\u0110\1\275\77\u010f\5\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\1\u0111\32\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\10\16"+
    "\1\u0112\22\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\12\16\1\u0113\20\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\u0114\2\0\33\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\2\16\1\u0115\30\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\3\16\1\u0116\27\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\10\16"+
    "\1\u0117\22\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\16\16\1\u0118\14\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\u0119\2\0\33\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\u011a\2\0\33\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\12\16\1\u011b\20\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\10\16\1\u011c\22\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\13\16"+
    "\1\u011d\17\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\3\16\1\u011e\27\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\12\16\1\u011f\20\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\u0120\2\0\33\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\u0121\2\0\33\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\3\16\1\u0122\27\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\4\16"+
    "\1\u0123\26\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\12\16\1\u0124\20\16\35\0\3\16\2\0\6\16"+
    "\1\u0125\1\16\1\0\1\16\2\0\33\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\u0126\2\0\33\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\u0127\2\0\33\16\35\0\3\16"+
    "\2\0\6\16\1\u0128\1\16\1\0\1\16\2\0\33\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\1\16"+
    "\1\u0129\31\16\35\0\3\16\2\0\4\16\1\u012a\3\16"+
    "\1\0\1\16\2\0\33\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\1\u012b\5\16\1\u012c\24\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\u012d\2\0\33\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\10\16\1\u012e"+
    "\22\16\35\0\3\16\2\0\10\16\1\0\1\u012f\2\0"+
    "\14\16\1\u0130\16\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\1\16\1\324\31\16\35\0\3\16\2\0"+
    "\10\16\1\0\1\16\2\0\1\u0131\32\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\13\16\1\u0132\17\16"+
    "\35\0\3\16\2\0\1\u0133\7\16\1\0\1\u0134\2\0"+
    "\7\16\1\u0135\13\16\1\u0136\1\u0137\1\u0138\5\16\35\0"+
    "\3\16\2\0\6\16\1\u0139\1\16\1\0\1\16\2\0"+
    "\10\16\1\u013a\22\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\6\16\1\u013b\24\16\35\0\3\16\2\0"+
    "\10\16\1\0\1\u013c\2\0\33\16\35\0\3\16\2\0"+
    "\10\16\1\0\1\16\2\0\10\16\1\u013d\22\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\21\16\1\u013e"+
    "\11\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\3\16\1\u013f\27\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\30\16\1\u0140\2\16\35\0\3\16\2\0"+
    "\10\16\1\0\1\16\2\0\10\16\1\u0141\22\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\7\16\1\u0142"+
    "\23\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\3\16\1\u0143\27\16\35\0\3\16\2\0\6\16\1\u0144"+
    "\1\16\1\0\1\16\2\0\33\16\35\0\3\16\2\0"+
    "\10\16\1\0\1\16\2\0\1\16\1\u0145\1\16\1\u0146"+
    "\27\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\10\16\1\u0147\22\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\u0148\2\0\3\16\1\u0149\27\16\35\0\3\16\2\0"+
    "\10\16\1\0\1\16\2\0\13\16\1\u014a\17\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\2\16\1\u014b"+
    "\30\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\22\16\1\u014c\10\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\10\16\1\u014d\22\16\35\0\3\16\2\0"+
    "\6\16\1\u014e\1\16\1\0\1\16\2\0\33\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\22\16\1\u014f"+
    "\10\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\4\16\1\u0150\26\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\1\u0151\32\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\6\16\1\u0152\24\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\14\16\1\u0153\16\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\3\16"+
    "\1\u0154\27\16\111\0\1\u0155\47\0\1\u0156\117\0\1\u0157"+
    "\4\0\1\u0158\77\0\1\u0159\110\0\1\u015a\121\0\1\u015b"+
    "\110\0\1\u015c\77\0\1\u015d\123\0\1\u015e\75\0\1\u015f"+
    "\130\0\1\u0160\70\0\1\u0161\122\0\1\u0162\60\0\1\u0163"+
    "\4\0\2\u0163\1\0\1\u0163\6\0\1\u0164\24\0\5\u0163"+
    "\33\0\10\274\1\u0165\1\u010e\77\274\11\u010f\1\u0166\77\u010f"+
    "\5\0\3\16\2\0\10\16\1\0\1\16\2\0\21\16"+
    "\1\u0167\11\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\3\16\1\u0168\27\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\10\16\1\u0169\22\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\13\16\1\u016a\17\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\1\u016b"+
    "\32\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\6\16\1\u016c\24\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\2\16\1\u016d\30\16\35\0\3\16\2\0"+
    "\10\16\1\0\1\16\2\0\6\16\1\u016e\24\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\u016f\2\0\33\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\21\16\1\u0170"+
    "\11\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\6\16\1\u0171\24\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\13\16\1\u0172\17\16\35\0\3\16\2\0"+
    "\6\16\1\u0173\1\16\1\0\1\16\2\0\33\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\11\16\1\u0174"+
    "\21\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\13\16\1\u0175\17\16\35\0\3\16\2\0\6\16\1\u0176"+
    "\1\16\1\0\1\16\2\0\33\16\35\0\3\16\2\0"+
    "\10\16\1\0\1\16\2\0\2\16\1\u0177\30\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\5\16\1\u0178"+
    "\25\16\35\0\3\16\2\0\6\16\1\u0179\1\16\1\0"+
    "\1\16\2\0\1\16\1\u017a\2\16\1\u017b\26\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\14\16\1\u017c"+
    "\16\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\10\16\1\u017d\22\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\12\16\1\u017e\20\16\35\0\3\16\2\0"+
    "\10\16\1\0\1\16\2\0\7\16\1\u017f\23\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\3\16\1\u0180"+
    "\27\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\1\u0181\32\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\1\u0182\32\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\10\16\1\u0183\22\16\35\0\3\16\2\0"+
    "\10\16\1\0\1\u0184\2\0\3\16\1\u0185\27\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\24\16\1\u0186"+
    "\6\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\2\16\1\u0187\30\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\27\16\1\u0188\3\16\35\0\3\16\2\0"+
    "\10\16\1\0\1\16\2\0\26\16\1\u0189\4\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\2\16\1\u018a"+
    "\30\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\6\16\1\u018b\24\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\30\16\1\u018c\2\16\35\0\3\16\2\0"+
    "\10\16\1\0\1\16\2\0\1\16\1\u018d\31\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\1\u018e\32\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\u018f\2\0\33\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\1\u0190"+
    "\32\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\6\16\1\u0191\24\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\15\16\1\u0192\15\16\35\0\3\16\2\0"+
    "\1\u0193\7\16\1\0\1\16\2\0\7\16\1\u0194\13\16"+
    "\1\u0195\1\u0196\1\u0197\5\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\7\16\1\u0198\23\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\3\16\1\u0199\27\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\6\16"+
    "\1\u019a\24\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\1\16\1\u019b\31\16\35\0\3\16\2\0\5\16"+
    "\1\u019c\2\16\1\0\1\16\2\0\33\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\22\16\1\u019d\10\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\u019e\2\0\33\16"+
    "\35\0\3\16\2\0\6\16\1\u019f\1\16\1\0\1\16"+
    "\2\0\33\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\3\16\1\u01a0\27\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\1\u01a1\32\16\35\0\3\16\2\0"+
    "\5\16\1\u01a2\2\16\1\0\1\16\2\0\33\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\12\16\1\u01a3"+
    "\20\16\60\0\1\u01a4\121\0\1\u01a5\102\0\1\u01a6\1\0"+
    "\1\u01a7\107\0\1\u01a8\104\0\1\u01a9\115\0\1\u01aa\110\0"+
    "\1\u01ab\113\0\1\u01ac\114\0\1\u01ad\77\0\1\u01ae\111\0"+
    "\1\u01af\61\0\1\u0163\4\0\2\u0163\1\0\1\u0163\33\0"+
    "\5\u0163\33\0\10\u010f\1\u0110\1\u0166\77\u010f\5\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\6\16\1\u01b0\24\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\10\16"+
    "\1\u01b1\22\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\3\16\1\u01b2\27\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\3\16\1\u01b3\27\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\13\16\1\u01b4\17\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\3\16"+
    "\1\u01b5\27\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\2\16\1\u01b6\30\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\4\16\1\u01b7\26\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\13\16\1\u01b8\17\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\3\16"+
    "\1\u01b9\27\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\5\16\1\u01ba\25\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\22\16\1\u01bb\10\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\7\16\1\u01bc\23\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\7\16"+
    "\1\u01bd\23\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\5\16\1\u01be\25\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\u01bf\2\0\33\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\u01c0\2\0\33\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\u01c1\2\0\33\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\10\16\1\u01c2\22\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\u01c3\2\0\33\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\u01c4\2\0\33\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\13\16\1\u01c5\17\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\2\16"+
    "\1\u01c6\30\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\10\16\1\u01c7\22\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\7\16\1\u01c8\23\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\1\u01c9\5\16\1\u01ca"+
    "\24\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\5\16\1\u01cb\25\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\3\16\1\u01cc\27\16\35\0\3\16\2\0"+
    "\10\16\1\0\1\16\2\0\13\16\1\u01cd\17\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\u01ce\2\0\33\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\11\16\1\u01cf"+
    "\21\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\15\16\1\u01d0\15\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\13\16\1\u01d1\17\16\35\0\3\16\2\0"+
    "\10\16\1\0\1\16\2\0\3\16\1\u01d2\27\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\13\16\1\u01d3"+
    "\17\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\24\16\1\u01d4\6\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\27\16\1\u01d5\3\16\35\0\3\16\2\0"+
    "\10\16\1\0\1\16\2\0\26\16\1\u01d6\4\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\7\16\1\u01d7"+
    "\23\16\35\0\3\16\2\0\6\16\1\u01d8\1\16\1\0"+
    "\1\16\2\0\33\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\3\16\1\u01d9\27\16\35\0\3\16\2\0"+
    "\10\16\1\0\1\16\2\0\4\16\1\u01da\26\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\6\16\1\u01db"+
    "\24\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\7\16\1\u01dc\23\16\35\0\3\16\2\0\10\16\1\0"+
    "\1\16\2\0\1\u01dd\32\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\1\u01de\32\16\60\0\1\u01df\117\0"+
    "\1\u01e0\104\0\1\u01e1\106\0\1\u01e2\120\0\1\u01e3\72\0"+
    "\1\u01e4\117\0\1\u01e5\104\0\1\u01e6\117\0\1\u01e7\60\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\7\16\1\u01e8"+
    "\23\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\1\u01e9\32\16\35\0\3\16\2\0\6\16\1\u01ea\1\16"+
    "\1\0\1\16\2\0\33\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\6\16\1\u01eb\24\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\u01ec\2\0\33\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\10\16\1\u01ed\22\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\3\16"+
    "\1\u01ee\27\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\5\16\1\u01ef\25\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\3\16\1\u01f0\27\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\4\16\1\u01f1\26\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\22\16"+
    "\1\u01f2\10\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\4\16\1\u01f3\26\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\17\16\1\u01f4\13\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\12\16\1\u01f5\20\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\15\16"+
    "\1\u01f6\15\16\35\0\3\16\2\0\6\16\1\u01f7\1\16"+
    "\1\0\1\16\2\0\33\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\1\u01f8\32\16\35\0\3\16\2\0"+
    "\10\16\1\0\1\16\2\0\6\16\1\u01f9\24\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\1\u01fa\32\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\u01fb\2\0\33\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\3\16"+
    "\1\u01fc\27\16\35\0\3\16\2\0\10\16\1\0\1\u01fd"+
    "\2\0\33\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\12\16\1\u01fe\20\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\5\16\1\u01ff\25\16\35\0\3\16"+
    "\2\0\6\16\1\u0200\1\16\1\0\1\16\2\0\33\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\16\16"+
    "\1\u0201\14\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\10\16\1\u0202\22\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\3\16\1\u0203\27\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\1\16\1\u0204\31\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\10\16"+
    "\1\u0205\22\16\64\0\1\u0206\114\0\1\u0207\106\0\1\u0208"+
    "\75\0\1\u0209\130\0\1\u020a\52\0\3\16\2\0\4\16"+
    "\1\u020b\3\16\1\0\1\16\2\0\33\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\2\16\1\u020c\30\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\3\16"+
    "\1\u020d\27\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\17\16\1\u020e\13\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\16\16\1\u020f\14\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\7\16\1\u0210\23\16"+
    "\35\0\3\16\2\0\10\16\1\0\1\16\2\0\13\16"+
    "\1\u0211\17\16\35\0\3\16\2\0\10\16\1\0\1\16"+
    "\2\0\3\16\1\u0212\27\16\35\0\3\16\2\0\10\16"+
    "\1\0\1\16\2\0\13\16\1\u0213\17\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\u0214\2\0\33\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\u0215\2\0\33\16\35\0\3\16"+
    "\2\0\10\16\1\0\1\16\2\0\1\u0216\32\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\u0217\2\0\33\16\67\0"+
    "\1\u0218\102\0\1\u0219\117\0\1\u021a\55\0\3\16\2\0"+
    "\10\16\1\0\1\16\2\0\10\16\1\u021b\22\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\u021c\2\0\33\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\u021d\2\0\33\16\35\0"+
    "\3\16\2\0\10\16\1\0\1\16\2\0\4\16\1\u021e"+
    "\26\16\35\0\3\16\2\0\10\16\1\0\1\16\2\0"+
    "\11\16\1\u021f\21\16\61\0\1\u0220\111\0\1\u0221\63\0"+
    "\3\16\2\0\10\16\1\0\1\u0222\2\0\33\16\53\0"+
    "\1\u0223\72\0\3\16\2\0\5\16\1\u0224\2\16\1\0"+
    "\1\16\2\0\33\16\35\0\3\16\2\0\5\16\1\u0225"+
    "\2\16\1\0\1\16\2\0\33\16\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29127];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\2\1\1\11\15\1\1\11\31\1\11\11"+
    "\1\1\4\11\13\1\1\11\1\1\3\11\1\1\1\11"+
    "\1\1\3\11\1\0\3\1\1\0\2\1\2\11\14\1"+
    "\2\11\52\1\1\11\1\0\2\1\5\11\1\1\1\11"+
    "\1\1\5\11\7\0\1\11\5\0\1\11\3\1\1\0"+
    "\1\11\10\1\1\11\71\1\3\11\1\1\16\0\1\1"+
    "\1\11\104\1\1\11\3\0\1\1\3\0\1\11\1\0"+
    "\1\11\3\0\1\1\1\0\1\11\1\0\75\1\1\11"+
    "\1\0\1\11\7\0\1\11\1\0\57\1\2\0\2\11"+
    "\1\0\1\11\1\0\1\11\1\0\36\1\3\0\2\11"+
    "\15\1\1\0\1\11\1\0\5\1\1\11\1\0\1\1"+
    "\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[549];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int sc_ctrlchar = '\\';
  private boolean sc_needsemicolon = false;

  private CopyOnWriteArrayList<PragmaChangeListener> listeners = new CopyOnWriteArrayList<>();

  /** Indicates whether or not lexed string is packed. */
  private boolean packed = false;

  private static String zzToPrintable(CharSequence str) {
    return zzToPrintable(str.toString());
  }

  private void setPragma(/*@NotNull @NonNls*/ String pragma, Object value) {
    for (PragmaChangeListener l : listeners) {
      l.onPragmaChanged(pragma, value);
    }
  }

  public void addPragmaChangeListener(@NotNull PragmaChangeListener l) {
    listeners.add(l);
    l.onPragmaChanged("ctrlchar", sc_ctrlchar);
    l.onPragmaChanged("semicolon", sc_needsemicolon);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _SpPreprocessorLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case STRING: {
              yybegin(YYINITIAL); return packed ? PACKED_STRING_LITERAL : STRING_LITERAL;
            }
            case 550: break;
            case RAW_STRING: {
              yybegin(YYINITIAL); return packed ? PACKED_RAW_STRING_LITERAL : RAW_STRING_LITERAL;
            }
            case 551: break;
            case CHARACTER: {
              yybegin(YYINITIAL); return CHARACTER_LITERAL;
            }
            case 552: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { if (yycharat(0) == sc_ctrlchar) {
                          yybegin(HARD_STRING);
                        } else {
                          return BAD_CHARACTER;
                        }
            }
          case 179: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 180: break;
          case 3: 
            { return CELL_LITERAL;
            }
          case 181: break;
          case 4: 
            { return AT;
            }
          case 182: break;
          case 5: 
            { return IDENTIFIER;
            }
          case 183: break;
          case 6: 
            { return DIV;
            }
          case 184: break;
          case 7: 
            { return ASTERISK;
            }
          case 185: break;
          case 8: 
            { return UNDERSCORE;
            }
          case 186: break;
          case 9: 
            { return DOT;
            }
          case 187: break;
          case 10: 
            { return MINUS;
            }
          case 188: break;
          case 11: 
            { yybegin(PREPROCESSOR); return HASH;
            }
          case 189: break;
          case 12: 
            { return EQ;
            }
          case 190: break;
          case 13: 
            { return EXCL;
            }
          case 191: break;
          case 14: 
            { return OR;
            }
          case 192: break;
          case 15: 
            { return PLUS;
            }
          case 193: break;
          case 16: 
            { return LT;
            }
          case 194: break;
          case 17: 
            { return GT;
            }
          case 195: break;
          case 18: 
            { return AND;
            }
          case 196: break;
          case 19: 
            { return XOR;
            }
          case 197: break;
          case 20: 
            { return PERC;
            }
          case 198: break;
          case 21: 
            { return LPARENTH;
            }
          case 199: break;
          case 22: 
            { return RPARENTH;
            }
          case 200: break;
          case 23: 
            { return LBRACE;
            }
          case 201: break;
          case 24: 
            { return RBRACE;
            }
          case 202: break;
          case 25: 
            { return LBRACKET;
            }
          case 203: break;
          case 26: 
            { return RBRACKET;
            }
          case 204: break;
          case 27: 
            { return COMMA;
            }
          case 205: break;
          case 28: 
            { return TILDE;
            }
          case 206: break;
          case 29: 
            { return QUEST;
            }
          case 207: break;
          case 30: 
            { return COLON;
            }
          case 208: break;
          case 31: 
            { return SEMICOLON;
            }
          case 209: break;
          case 32: 
            { yybegin(CHARACTER);
            }
          case 210: break;
          case 33: 
            { yybegin(STRING); packed = false;
            }
          case 211: break;
          case 34: 
            { yybegin(YYINITIAL); yypushback(1);
            }
          case 212: break;
          case 35: 
            { 
            }
          case 213: break;
          case 36: 
            { yybegin(YYINITIAL); yypushback(1); return packed ? PACKED_STRING_LITERAL : STRING_LITERAL;
            }
          case 214: break;
          case 37: 
            { yybegin(YYINITIAL); return packed ? PACKED_STRING_LITERAL : STRING_LITERAL;
            }
          case 215: break;
          case 38: 
            { yybegin(YYINITIAL); return packed ? PACKED_RAW_STRING_LITERAL : RAW_STRING_LITERAL;
            }
          case 216: break;
          case 39: 
            { yybegin(YYINITIAL); yypushback(yylength()); return BAD_CHARACTER;
            }
          case 217: break;
          case 40: 
            { yybegin(RAW_STRING); packed = false;
            }
          case 218: break;
          case 41: 
            { yybegin(YYINITIAL); yypushback(1); return CHARACTER_LITERAL;
            }
          case 219: break;
          case 42: 
            { yybegin(YYINITIAL); return CHARACTER_LITERAL;
            }
          case 220: break;
          case 43: 
            { return ESCAPING_SLASH;
            }
          case 221: break;
          case 44: 
            { return EOL_COMMENT;
            }
          case 222: break;
          case 45: 
            { return C_STYLE_COMMENT;
            }
          case 223: break;
          case 46: 
            { return DIVEQ;
            }
          case 224: break;
          case 47: 
            { return ASTERISKEQ;
            }
          case 225: break;
          case 48: 
            { return DOTDOT;
            }
          case 226: break;
          case 49: 
            { return MINUSMINUS;
            }
          case 227: break;
          case 50: 
            { return MINUSEQ;
            }
          case 228: break;
          case 51: 
            { return AS_KEYWORD;
            }
          case 229: break;
          case 52: 
            { return DO_KEYWORD;
            }
          case 230: break;
          case 53: 
            { return IF_KEYWORD;
            }
          case 231: break;
          case 54: 
            { return IN_KEYWORD;
            }
          case 232: break;
          case 55: 
            { return EQEQ;
            }
          case 233: break;
          case 56: 
            { return EXCLEQ;
            }
          case 234: break;
          case 57: 
            { yybegin(STRING); packed = true;
            }
          case 235: break;
          case 58: 
            { return OREQ;
            }
          case 236: break;
          case 59: 
            { return OROR;
            }
          case 237: break;
          case 60: 
            { return PLUSEQ;
            }
          case 238: break;
          case 61: 
            { return PLUSPLUS;
            }
          case 239: break;
          case 62: 
            { return LTEQ;
            }
          case 240: break;
          case 63: 
            { return LTLT;
            }
          case 241: break;
          case 64: 
            { return GTEQ;
            }
          case 242: break;
          case 65: 
            { return GTGT;
            }
          case 243: break;
          case 66: 
            { return ANDEQ;
            }
          case 244: break;
          case 67: 
            { return ANDAND;
            }
          case 245: break;
          case 68: 
            { return XOREQ;
            }
          case 246: break;
          case 69: 
            { return PERCEQ;
            }
          case 247: break;
          case 70: 
            { return COLONCOLON;
            }
          case 248: break;
          case 71: 
            { yybegin(YYINITIAL); return IF_DIRECTIVE;
            }
          case 249: break;
          case 72: 
            { if (yycharat(0) != sc_ctrlchar) {
                          yypushback(1);
                        }
            }
          case 250: break;
          case 73: 
            { yybegin(RAW_STRING); packed = true;
            }
          case 251: break;
          case 74: 
            { return RATIONAL_LITERAL;
            }
          case 252: break;
          case 75: 
            { return DOC_COMMENT;
            }
          case 253: break;
          case 76: 
            { return DOTDOTDOT;
            }
          case 254: break;
          case 77: 
            { return TRY_KEYWORD;
            }
          case 255: break;
          case 78: 
            { return FOR_KEYWORD;
            }
          case 256: break;
          case 79: 
            { return INT_KEYWORD;
            }
          case 257: break;
          case 80: 
            { return NEW_KEYWORD;
            }
          case 258: break;
          case 81: 
            { return LET_KEYWORD;
            }
          case 259: break;
          case 82: 
            { return VAR_KEYWORD;
            }
          case 260: break;
          case 83: 
            { if (yycharat(1) == sc_ctrlchar) {
                          yybegin(RAW_STRING);
                          packed = true;
                        } else {
                          yypushback(2);
                          return EXCL;
                       }
            }
          case 261: break;
          case 84: 
            { return LTLTEQ;
            }
          case 262: break;
          case 85: 
            { return GTGTEQ;
            }
          case 263: break;
          case 86: 
            { return GTGTGT;
            }
          case 264: break;
          case 87: 
            { return EXIT_KEYWORD;
            }
          case 265: break;
          case 88: 
            { return ENUM_KEYWORD;
            }
          case 266: break;
          case 89: 
            { return ELSE_KEYWORD;
            }
          case 267: break;
          case 90: 
            { return BOOLEAN_LITERAL;
            }
          case 268: break;
          case 91: 
            { return THIS_KEYWORD;
            }
          case 269: break;
          case 92: 
            { return DECL_KEYWORD;
            }
          case 270: break;
          case 93: 
            { return INTN_KEYWORD;
            }
          case 271: break;
          case 94: 
            { return INT8_KEYWORD;
            }
          case 272: break;
          case 95: 
            { return NULL_KEYWORD;
            }
          case 273: break;
          case 96: 
            { return CASE_KEYWORD;
            }
          case 274: break;
          case 97: 
            { return CHAR_KEYWORD;
            }
          case 275: break;
          case 98: 
            { return WITH_KEYWORD;
            }
          case 276: break;
          case 99: 
            { return GOTO_KEYWORD;
            }
          case 277: break;
          case 100: 
            { return VOID_KEYWORD;
            }
          case 278: break;
          case 101: 
            { return GTGTGTEQ;
            }
          case 279: break;
          case 102: 
            { yybegin(YYINITIAL); return ELSE_DIRECTIVE;
            }
          case 280: break;
          case 103: 
            { yybegin(YYINITIAL); return FILE_DIRECTIVE;
            }
          case 281: break;
          case 104: 
            { yybegin(YYINITIAL); return LINE_DIRECTIVE;
            }
          case 282: break;
          case 105: 
            { return BREAK_KEYWORD;
            }
          case 283: break;
          case 106: 
            { return STOCK_KEYWORD;
            }
          case 284: break;
          case 107: 
            { return SLEEP_KEYWORD;
            }
          case 285: break;
          case 108: 
            { return TAGOF_KEYWORD;
            }
          case 286: break;
          case 109: 
            { return THROW_KEYWORD;
            }
          case 287: break;
          case 110: 
            { return INT16_KEYWORD;
            }
          case 288: break;
          case 111: 
            { return INT64_KEYWORD;
            }
          case 289: break;
          case 112: 
            { return INT32_KEYWORD;
            }
          case 290: break;
          case 113: 
            { return USING_KEYWORD;
            }
          case 291: break;
          case 114: 
            { return UINTN_KEYWORD;
            }
          case 292: break;
          case 115: 
            { return UINT8_KEYWORD;
            }
          case 293: break;
          case 116: 
            { return UNION_KEYWORD;
            }
          case 294: break;
          case 117: 
            { return CONST_KEYWORD;
            }
          case 295: break;
          case 118: 
            { return CATCH_KEYWORD;
            }
          case 296: break;
          case 119: 
            { return WHILE_KEYWORD;
            }
          case 297: break;
          case 120: 
            { yybegin(YYINITIAL); return ERROR_DIRECTIVE;
            }
          case 298: break;
          case 121: 
            { yybegin(YYINITIAL); return ENDIF_DIRECTIVE;
            }
          case 299: break;
          case 122: 
            { yybegin(YYINITIAL); return UNDEF_DIRECTIVE;
            }
          case 300: break;
          case 123: 
            { return OBJECT_KEYWORD;
            }
          case 301: break;
          case 124: 
            { return ASSERT_KEYWORD;
            }
          case 302: break;
          case 125: 
            { return SEALED_KEYWORD;
            }
          case 303: break;
          case 126: 
            { return STATIC_KEYWORD;
            }
          case 304: break;
          case 127: 
            { return STRUCT_KEYWORD;
            }
          case 305: break;
          case 128: 
            { return SIZEOF_KEYWORD;
            }
          case 306: break;
          case 129: 
            { return SWITCH_KEYWORD;
            }
          case 307: break;
          case 130: 
            { return RETURN_KEYWORD;
            }
          case 308: break;
          case 131: 
            { return TYPEOF_KEYWORD;
            }
          case 309: break;
          case 132: 
            { return DOUBLE_KEYWORD;
            }
          case 310: break;
          case 133: 
            { return DELETE_KEYWORD;
            }
          case 311: break;
          case 134: 
            { return IMPORT_KEYWORD;
            }
          case 312: break;
          case 135: 
            { return NATIVE_KEYWORD;
            }
          case 313: break;
          case 136: 
            { return PUBLIC_KEYWORD;
            }
          case 314: break;
          case 137: 
            { return UINT16_KEYWORD;
            }
          case 315: break;
          case 138: 
            { return UINT64_KEYWORD;
            }
          case 316: break;
          case 139: 
            { return UINT32_KEYWORD;
            }
          case 317: break;
          case 140: 
            { yybegin(YYINITIAL); return ELSEIF_DIRECTIVE;
            }
          case 318: break;
          case 141: 
            { yybegin(YYINITIAL); return ASSERT_DIRECTIVE;
            }
          case 319: break;
          case 142: 
            { yybegin(YYINITIAL); return DEFINE_DIRECTIVE;
            }
          case 320: break;
          case 143: 
            { yybegin(YYINITIAL); return PRAGMA_DIRECTIVE;
            }
          case 321: break;
          case 144: 
            { return BUILTIN_KEYWORD;
            }
          case 322: break;
          case 145: 
            { return AQUIRE_KEYWORD;
            }
          case 323: break;
          case 146: 
            { return TYPESET_KEYWORD;
            }
          case 324: break;
          case 147: 
            { return TYPEDEF_KEYWORD;
            }
          case 325: break;
          case 148: 
            { return DEFAULT_KEYWORD;
            }
          case 326: break;
          case 149: 
            { return DEFINED_KEYWORD;
            }
          case 327: break;
          case 150: 
            { return FOREACH_KEYWORD;
            }
          case 328: break;
          case 151: 
            { return FORWARD_KEYWORD;
            }
          case 329: break;
          case 152: 
            { return FINALLY_KEYWORD;
            }
          case 330: break;
          case 153: 
            { return FUNCTAG_KEYWORD;
            }
          case 331: break;
          case 154: 
            { return PACKAGE_KEYWORD;
            }
          case 332: break;
          case 155: 
            { return PRIVATE_KEYWORD;
            }
          case 333: break;
          case 156: 
            { return CELLSOF_KEYWORD;
            }
          case 334: break;
          case 157: 
            { return CAST_TO_KEYWORD;
            }
          case 335: break;
          case 158: 
            { return VARIANT_KEYWORD;
            }
          case 336: break;
          case 159: 
            { return VIEW_AS_KEYWORD;
            }
          case 337: break;
          case 160: 
            { return VIRTUAL_KEYWORD;
            }
          case 338: break;
          case 161: 
            { yybegin(YYINITIAL); return INCLUDE_DIRECTIVE;
            }
          case 339: break;
          case 162: 
            { yybegin(YYINITIAL); return WARNING_DIRECTIVE;
            }
          case 340: break;
          case 163: 
            { return OPERATOR_KEYWORD;
            }
          case 341: break;
          case 164: 
            { return EXPLICIT_KEYWORD;
            }
          case 342: break;
          case 165: 
            { return READONLY_KEYWORD;
            }
          case 343: break;
          case 166: 
            { return FUNCENUM_KEYWORD;
            }
          case 344: break;
          case 167: 
            { return FUNCTION_KEYWORD;
            }
          case 345: break;
          case 168: 
            { return IMPLICIT_KEYWORD;
            }
          case 346: break;
          case 169: 
            { return CONTINUE_KEYWORD;
            }
          case 347: break;
          case 170: 
            { return VOLATILE_KEYWORD;
            }
          case 348: break;
          case 171: 
            { yybegin(YYINITIAL); return ENDINPUT_DIRECTIVE;
            }
          case 349: break;
          case 172: 
            { return INTERFACE_KEYWORD;
            }
          case 350: break;
          case 173: 
            { return NAMESPACE_KEYWORD;
            }
          case 351: break;
          case 174: 
            { return PROTECTED_KEYWORD;
            }
          case 352: break;
          case 175: 
            { return METHODMAP_KEYWORD;
            }
          case 353: break;
          case 176: 
            { yybegin(YYINITIAL); return ENDSCRIPT_DIRECTIVE;
            }
          case 354: break;
          case 177: 
            { yybegin(YYINITIAL); return TRYINCLUDE_DIRECTIVE;
            }
          case 355: break;
          case 178: 
            { return NULLABLE_KEYWORD;
            }
          case 356: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
