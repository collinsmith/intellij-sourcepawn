/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package net.alliedmods.lang.sourcepawn.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static net.alliedmods.lang.sourcepawn.lexer.SpTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>SpLexer.flex</tt>
 */
class _ApLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PREPROCESSOR = 2;
  public static final int STRING = 4;
  public static final int RAW_STRING = 6;
  public static final int HARD_STRING = 8;
  public static final int CHARACTER = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\1\106\1\107\1\2\22\0\1\1\1\62\1\105\1\25\1\0\1\71\1\67\1\110"+
    "\1\72\1\73\1\11\1\64\1\100\1\24\1\22\1\10\1\15\1\12\1\54\1\53\1\55\1\13\1"+
    "\52\1\13\1\51\1\5\1\103\1\104\1\65\1\61\1\66\1\102\1\6\6\14\24\7\1\76\1\4"+
    "\1\77\1\70\1\17\1\0\1\32\1\16\1\35\1\43\1\23\1\31\1\50\1\42\1\37\1\57\1\40"+
    "\1\33\1\44\1\41\1\20\1\45\1\36\1\27\1\34\1\26\1\30\1\56\1\47\1\21\1\46\1\60"+
    "\1\74\1\63\1\75\1\101\6\0\1\106\242\0\2\106\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\3\1\5\1\10\1\5\1\11\1\5\1\12"+
    "\1\13\20\5\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\2\42\47\41\1\43\1\41\1\44\1\45\1\41\2\46"+
    "\1\47\1\50\1\51\1\0\2\52\1\3\1\0\1\53"+
    "\1\54\1\55\1\56\3\3\5\5\1\57\3\5\1\60"+
    "\1\61\14\5\1\62\13\5\1\63\1\64\4\5\1\65"+
    "\13\5\1\66\1\0\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\2\106\2\41\1\0\1\107\1\110\1\54"+
    "\1\111\5\5\1\112\5\5\1\113\11\5\1\114\5\5"+
    "\1\115\14\5\1\116\1\5\1\117\21\5\1\120\2\5"+
    "\1\121\1\122\1\123\1\124\2\0\2\111\5\5\1\125"+
    "\1\5\1\126\1\127\1\130\2\5\1\131\27\5\1\132"+
    "\1\5\1\133\2\5\1\134\1\135\4\5\1\136\6\5"+
    "\1\137\5\5\1\140\1\5\1\141\1\5\1\142\3\5"+
    "\1\143\1\110\1\0\1\54\1\0\1\144\5\5\1\145"+
    "\1\146\5\5\1\147\1\5\1\150\1\151\2\5\1\152"+
    "\10\5\1\153\2\5\1\154\3\5\1\155\1\5\1\156"+
    "\1\5\1\157\1\5\1\160\1\161\15\5\1\162\6\5"+
    "\1\163\2\5\1\164\2\5\1\165\1\5\1\166\1\167"+
    "\1\170\6\5\1\171\1\5\1\172\1\173\1\174\1\175"+
    "\1\176\4\5\1\177\1\5\1\200\1\5\1\201\2\5"+
    "\1\202\3\5\1\203\5\5\1\204\3\5\1\205\1\206"+
    "\1\5\1\207\1\210\1\5\1\211\1\5\1\212\1\213"+
    "\1\5\1\214\1\215\3\5\1\216\1\217\2\5\1\220"+
    "\1\221\1\5\1\222\1\223\1\224\1\5\1\225\1\226"+
    "\1\227\1\230\1\231\1\232\1\5\1\233\3\5\1\234"+
    "\1\5\1\235\1\236\1\237\1\240\2\5\1\241";

  private static int [] zzUnpackAction() {
    int [] result = new int[505];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe"+
    "\0\u0447\0\u0490\0\u04d9\0\u0522\0\u056b\0\u01b6\0\u05b4\0\u05fd"+
    "\0\u0646\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845"+
    "\0\u088e\0\u08d7\0\u0920\0\u0969\0\u09b2\0\u09fb\0\u0a44\0\u0a8d"+
    "\0\u0ad6\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa\0\u0c43\0\u0c8c\0\u01b6"+
    "\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u01b6\0\u01b6"+
    "\0\u0cd5\0\u01b6\0\u01b6\0\u01b6\0\u0d1e\0\u01b6\0\u0248\0\u0291"+
    "\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447\0\u0490\0\u04d9"+
    "\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f\0\u06d8\0\u0721"+
    "\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e\0\u08d7\0\u0920\0\u0969"+
    "\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6\0\u0b1f\0\u0b68\0\u0bb1"+
    "\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5\0\u0d67\0\u01b6\0\u0db0\0\u01b6"+
    "\0\u01b6\0\u0df9\0\u01b6\0\u0e42\0\u01b6\0\u01b6\0\u01b6\0\u0248"+
    "\0\u0e8b\0\u0ed4\0\u0f1d\0\u0f66\0\u0faf\0\u0ff8\0\u01b6\0\u01b6"+
    "\0\u1041\0\u108a\0\u10d3\0\u111c\0\u1165\0\u11ae\0\u11f7\0\u1240"+
    "\0\u1289\0\u12d2\0\u131b\0\u1364\0\u01b6\0\u01b6\0\u13ad\0\u13f6"+
    "\0\u143f\0\u1488\0\u14d1\0\u151a\0\u1563\0\u15ac\0\u15f5\0\u163e"+
    "\0\u1687\0\u16d0\0\u1719\0\u1762\0\u17ab\0\u17f4\0\u183d\0\u1886"+
    "\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u02da\0\u1a85"+
    "\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd"+
    "\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15"+
    "\0\u01b6\0\u1f5e\0\u1f5e\0\u1f5e\0\u01b6\0\u01b6\0\u01b6\0\u01b6"+
    "\0\u01b6\0\u1fa7\0\u01b6\0\u1ff0\0\u01b6\0\u01b6\0\u01b6\0\u01b6"+
    "\0\u01b6\0\u01b6\0\u0df9\0\u2039\0\u2082\0\u0df9\0\u01b6\0\u20cb"+
    "\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u2238\0\u2281\0\u22ca\0\u01b6"+
    "\0\u2313\0\u235c\0\u23a5\0\u23ee\0\u2437\0\u02da\0\u2480\0\u24c9"+
    "\0\u2512\0\u255b\0\u25a4\0\u25ed\0\u2636\0\u267f\0\u26c8\0\u2711"+
    "\0\u275a\0\u27a3\0\u27ec\0\u2835\0\u287e\0\u02da\0\u28c7\0\u2910"+
    "\0\u2959\0\u29a2\0\u29eb\0\u2a34\0\u2a7d\0\u2ac6\0\u2b0f\0\u2b58"+
    "\0\u2ba1\0\u2bea\0\u2c33\0\u2c7c\0\u02da\0\u2cc5\0\u2d0e\0\u2d57"+
    "\0\u2da0\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4\0\u2f0d\0\u2f56\0\u2f9f"+
    "\0\u2fe8\0\u3031\0\u307a\0\u30c3\0\u310c\0\u3155\0\u319e\0\u31e7"+
    "\0\u3230\0\u01b6\0\u01b6\0\u01b6\0\u3279\0\u32c2\0\u330b\0\u3354"+
    "\0\u01b6\0\u339d\0\u33e6\0\u342f\0\u3478\0\u34c1\0\u02da\0\u350a"+
    "\0\u02da\0\u02da\0\u02da\0\u3553\0\u359c\0\u02da\0\u35e5\0\u362e"+
    "\0\u3677\0\u36c0\0\u3709\0\u3752\0\u379b\0\u37e4\0\u382d\0\u3876"+
    "\0\u38bf\0\u3908\0\u3951\0\u399a\0\u39e3\0\u3a2c\0\u3a75\0\u3abe"+
    "\0\u3b07\0\u3b50\0\u3b99\0\u3be2\0\u3c2b\0\u02da\0\u3c74\0\u02da"+
    "\0\u3cbd\0\u3d06\0\u02da\0\u02da\0\u3d4f\0\u3d98\0\u3de1\0\u3e2a"+
    "\0\u02da\0\u3e73\0\u3ebc\0\u3f05\0\u3f4e\0\u3f97\0\u3fe0\0\u02da"+
    "\0\u4029\0\u4072\0\u40bb\0\u4104\0\u414d\0\u02da\0\u4196\0\u02da"+
    "\0\u41df\0\u02da\0\u4228\0\u4271\0\u42ba\0\u01b6\0\u4303\0\u4303"+
    "\0\u01b6\0\u434c\0\u02da\0\u4395\0\u43de\0\u4427\0\u4470\0\u44b9"+
    "\0\u02da\0\u02da\0\u4502\0\u454b\0\u4594\0\u45dd\0\u4626\0\u02da"+
    "\0\u466f\0\u02da\0\u02da\0\u46b8\0\u4701\0\u02da\0\u474a\0\u4793"+
    "\0\u47dc\0\u4825\0\u486e\0\u48b7\0\u4900\0\u4949\0\u02da\0\u4992"+
    "\0\u49db\0\u02da\0\u4a24\0\u4a6d\0\u4ab6\0\u02da\0\u4aff\0\u02da"+
    "\0\u4b48\0\u02da\0\u4b91\0\u02da\0\u02da\0\u4bda\0\u4c23\0\u4c6c"+
    "\0\u4cb5\0\u4cfe\0\u4d47\0\u4d90\0\u4dd9\0\u4e22\0\u4e6b\0\u4eb4"+
    "\0\u4efd\0\u4f46\0\u02da\0\u4f8f\0\u4fd8\0\u5021\0\u506a\0\u50b3"+
    "\0\u50fc\0\u02da\0\u5145\0\u518e\0\u02da\0\u51d7\0\u5220\0\u02da"+
    "\0\u5269\0\u02da\0\u02da\0\u02da\0\u52b2\0\u52fb\0\u5344\0\u538d"+
    "\0\u53d6\0\u541f\0\u02da\0\u5468\0\u02da\0\u02da\0\u02da\0\u02da"+
    "\0\u02da\0\u54b1\0\u54fa\0\u5543\0\u558c\0\u02da\0\u55d5\0\u02da"+
    "\0\u561e\0\u02da\0\u5667\0\u56b0\0\u02da\0\u56f9\0\u5742\0\u578b"+
    "\0\u02da\0\u57d4\0\u581d\0\u5866\0\u58af\0\u58f8\0\u02da\0\u5941"+
    "\0\u598a\0\u59d3\0\u02da\0\u02da\0\u5a1c\0\u02da\0\u02da\0\u5a65"+
    "\0\u02da\0\u5aae\0\u02da\0\u02da\0\u5af7\0\u02da\0\u02da\0\u5b40"+
    "\0\u5b89\0\u5bd2\0\u02da\0\u02da\0\u5c1b\0\u5c64\0\u02da\0\u02da"+
    "\0\u5cad\0\u02da\0\u02da\0\u02da\0\u5cf6\0\u02da\0\u02da\0\u02da"+
    "\0\u02da\0\u02da\0\u02da\0\u5d3f\0\u02da\0\u5d88\0\u5dd1\0\u5e1a"+
    "\0\u02da\0\u5e63\0\u02da\0\u02da\0\u02da\0\u02da\0\u5eac\0\u5ef5"+
    "\0\u02da";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[505];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\2\7\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\12\1\14\1\17\1\20\1\21\1\22\1\14"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\14\1\37\1\14\1\40"+
    "\1\14\1\41\1\42\1\43\1\14\1\44\1\45\5\12"+
    "\1\46\2\14\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\7"+
    "\1\10\1\7\1\74\1\10\1\75\1\76\1\77\1\100"+
    "\2\101\1\102\1\103\2\100\1\101\1\104\1\105\1\106"+
    "\1\107\1\101\1\110\1\111\1\112\1\26\1\113\1\114"+
    "\1\115\1\116\1\117\1\120\1\121\1\122\1\101\1\123"+
    "\1\101\1\124\1\101\1\125\1\126\1\127\1\101\1\130"+
    "\1\131\5\100\1\132\2\101\1\133\1\134\1\135\1\136"+
    "\1\137\1\140\1\141\1\142\1\143\11\74\1\144\3\74"+
    "\1\10\1\74\2\145\2\146\1\147\100\145\1\150\3\145"+
    "\2\74\2\151\1\152\100\74\1\151\3\74\62\153\1\154"+
    "\22\153\1\155\3\153\2\145\2\156\1\147\103\145\1\157"+
    "\112\0\1\10\105\0\1\10\2\0\1\160\1\161\1\162"+
    "\103\0\1\160\6\0\1\163\4\0\2\163\1\0\1\163"+
    "\1\0\1\163\2\0\1\164\26\0\5\163\40\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\33\14\40\0\1\165"+
    "\1\166\47\0\1\167\110\0\1\170\34\0\1\163\4\0"+
    "\2\163\1\0\1\163\1\171\1\163\1\172\1\173\1\164"+
    "\26\0\5\163\40\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\1\14\1\174\1\175\30\14\35\0\3\14\2\0"+
    "\5\14\1\176\2\14\1\0\1\14\2\0\33\14\35\0"+
    "\3\14\2\0\4\14\1\177\3\14\1\0\1\14\2\0"+
    "\17\14\1\200\13\14\52\0\1\201\73\0\3\14\2\0"+
    "\7\14\1\202\1\0\1\14\2\0\5\14\1\203\5\14"+
    "\1\204\17\14\54\0\1\205\34\0\1\206\34\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\1\14\1\207\2\14"+
    "\1\210\7\14\1\211\3\14\1\212\12\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\213\2\0\33\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\6\14\1\214\2\14"+
    "\1\215\1\14\1\216\17\14\35\0\3\14\2\0\6\14"+
    "\1\217\1\14\1\0\1\14\2\0\2\14\1\220\1\14"+
    "\1\221\4\14\1\222\21\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\6\14\1\223\1\224\23\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\225\2\0\33\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\226\2\0\1\227\4\14"+
    "\1\230\3\14\1\231\7\14\1\232\11\14\35\0\3\14"+
    "\2\0\6\14\1\233\1\14\1\0\1\234\2\0\4\14"+
    "\1\235\7\14\1\236\16\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\3\14\1\237\7\14\1\240\2\14"+
    "\1\241\14\14\35\0\3\14\2\0\10\14\1\0\1\242"+
    "\2\0\2\14\1\243\1\14\1\244\26\14\35\0\3\14"+
    "\2\0\6\14\1\245\1\14\1\0\1\246\2\0\33\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\247\2\0\33\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\1\14"+
    "\1\250\1\251\1\14\1\252\26\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\11\14\1\253\2\14\1\254"+
    "\16\14\35\0\3\14\2\0\6\14\1\255\1\14\1\0"+
    "\1\14\2\0\33\14\35\0\3\14\2\0\6\14\1\256"+
    "\1\14\1\0\1\14\2\0\4\14\1\257\4\14\1\260"+
    "\21\14\111\0\1\261\27\0\2\262\2\0\55\262\1\263"+
    "\23\262\1\264\2\0\1\262\61\0\1\265\1\0\1\266"+
    "\106\0\1\267\2\0\1\270\105\0\1\271\3\0\1\272"+
    "\104\0\1\273\4\0\1\274\103\0\1\275\5\0\1\276"+
    "\102\0\1\277\110\0\1\300\132\0\1\301\10\0\1\76"+
    "\105\0\2\302\2\0\106\302\1\303\1\304\1\305\103\302"+
    "\1\303\1\302\1\0\1\306\1\304\1\305\103\0\1\306"+
    "\106\0\1\307\4\0\1\162\1\0\1\162\103\0\1\162"+
    "\2\0\1\162\105\0\1\162\6\0\1\163\4\0\2\163"+
    "\1\0\1\163\1\0\1\163\31\0\5\163\40\0\1\310"+
    "\4\0\2\310\1\0\1\310\33\0\5\310\33\0\2\165"+
    "\2\0\105\165\11\311\1\312\77\311\12\0\1\171\2\0"+
    "\1\171\1\0\1\171\103\0\2\172\1\0\1\172\1\0"+
    "\1\172\32\0\4\172\40\0\1\173\4\0\6\173\3\0"+
    "\1\173\5\0\2\173\2\0\1\173\5\0\1\173\5\0"+
    "\5\173\40\0\3\14\2\0\10\14\1\0\1\313\2\0"+
    "\33\14\35\0\3\14\2\0\10\14\1\0\1\14\2\0"+
    "\11\14\1\314\21\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\13\14\1\315\17\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\31\14\1\316\1\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\317\2\0\33\14\52\0"+
    "\1\320\73\0\3\14\2\0\10\14\1\0\1\14\2\0"+
    "\11\14\1\321\5\14\1\322\13\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\6\14\1\323\24\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\2\14\1\324"+
    "\30\14\35\0\3\14\2\0\10\14\1\0\1\14\2\0"+
    "\2\14\1\325\15\14\1\326\12\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\22\14\1\327\10\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\1\14\1\330"+
    "\7\14\1\331\21\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\17\14\1\332\13\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\1\333\3\14\1\334\26\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\11\14"+
    "\1\335\21\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\13\14\1\336\17\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\11\14\1\337\21\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\1\14\1\340\31\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\13\14"+
    "\1\341\17\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\5\14\1\342\25\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\13\14\1\343\17\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\6\14\1\344\24\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\10\14"+
    "\1\345\22\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\1\346\32\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\4\14\1\347\26\14\35\0\3\14\2\0"+
    "\6\14\1\350\1\14\1\0\1\14\2\0\1\14\1\351"+
    "\2\14\1\352\26\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\353\2\0\33\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\32\14\1\354\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\11\14\1\355\21\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\13\14\1\356\17\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\5\14"+
    "\1\357\25\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\1\360\5\14\1\361\24\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\4\14\1\362\26\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\1\363\32\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\17\14"+
    "\1\364\13\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\21\14\1\365\11\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\5\14\1\366\25\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\1\367\15\14\1\370"+
    "\14\14\35\0\3\14\2\0\10\14\1\0\1\14\2\0"+
    "\2\14\1\371\30\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\3\14\1\372\1\14\1\373\1\14\1\374"+
    "\23\14\35\0\3\14\2\0\10\14\1\0\1\14\2\0"+
    "\1\375\32\14\35\0\3\14\2\0\6\14\1\376\1\14"+
    "\1\0\1\14\2\0\11\14\1\377\21\14\35\0\3\14"+
    "\2\0\4\14\1\u0100\3\14\1\0\1\14\2\0\33\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\7\14"+
    "\1\u0101\23\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\1\u0102\32\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\11\14\1\u0103\21\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\1\u0104\32\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\5\14\1\u0105\3\14"+
    "\1\u0106\21\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\1\14\1\u0107\31\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\u0108\2\0\1\14\1\u0109\31\14\135\0\1\u010a"+
    "\64\0\1\u010b\110\0\1\u010c\4\0\1\u010d\23\0\1\305"+
    "\1\0\1\305\103\0\1\305\2\0\1\305\105\0\1\305"+
    "\24\0\1\u010e\65\0\11\311\1\u010f\77\311\10\u0110\1\u0111"+
    "\1\312\77\u0110\5\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\4\14\1\u0112\26\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\5\14\1\u0113\25\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\2\14\1\u0114\30\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\u0115\2\0\33\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\1\14"+
    "\1\u0116\31\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\1\u0117\32\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\5\14\1\u0118\25\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\u0119\2\0\33\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\16\14\1\u011a\14\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\u011b\2\0\33\14\35\0"+
    "\3\14\2\0\6\14\1\u011c\1\14\1\0\1\14\2\0"+
    "\33\14\35\0\3\14\2\0\6\14\1\u011d\1\14\1\0"+
    "\1\14\2\0\33\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\6\14\1\u011e\24\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\u011f\2\0\33\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\2\14\1\u0120\30\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\15\14\1\u0121"+
    "\15\14\35\0\3\14\2\0\10\14\1\0\1\14\2\0"+
    "\13\14\1\u0122\17\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\1\u0123\32\14\35\0\3\14\2\0\6\14"+
    "\1\u0124\1\14\1\0\1\14\2\0\33\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\u0125\2\0\21\14\1\u0126\11\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\7\14"+
    "\1\u0127\23\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\6\14\1\325\24\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\4\14\1\u0128\26\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\u0129\2\0\33\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\2\14\1\u012a\30\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\5\14"+
    "\1\u012b\25\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\7\14\1\u012c\23\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\2\14\1\u012d\30\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\1\u012e\32\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\u012f\2\0\33\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\u0130\2\0\33\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\1\u0131\32\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\1\u0132"+
    "\5\14\1\u0133\24\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\5\14\1\u0134\25\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\7\14\1\u0135\23\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\u0136\2\0\1\u0137\32\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\1\14"+
    "\1\u0138\31\14\35\0\3\14\2\0\1\u0139\7\14\1\0"+
    "\1\u013a\2\0\13\14\1\u013b\7\14\1\u013c\1\u013d\1\u013e"+
    "\5\14\35\0\3\14\2\0\6\14\1\u013f\1\14\1\0"+
    "\1\14\2\0\5\14\1\u0140\25\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\5\14\1\u0141\25\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\11\14\1\u0142"+
    "\21\14\35\0\3\14\2\0\10\14\1\0\1\u0143\2\0"+
    "\33\14\35\0\3\14\2\0\4\14\1\u0144\3\14\1\0"+
    "\1\14\2\0\33\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\4\14\1\u0145\4\14\1\u0146\21\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\u0147\2\0\33\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\5\14\1\u0148"+
    "\25\14\35\0\3\14\2\0\10\14\1\0\1\14\2\0"+
    "\14\14\1\u0149\16\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\1\u014a\32\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\30\14\1\u014b\2\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\5\14\1\u014c\25\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\12\14"+
    "\1\u014d\20\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\14\14\1\u014e\16\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\5\14\1\u014f\25\14\35\0\3\14"+
    "\2\0\6\14\1\u0150\1\14\1\0\1\14\2\0\33\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\4\14"+
    "\1\u0151\26\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\15\14\1\u0152\15\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\11\14\1\u0153\21\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\21\14\1\u0154\11\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\1\u0155"+
    "\32\14\111\0\1\u0156\34\0\1\u0157\4\0\2\u0157\1\0"+
    "\1\u0157\6\0\1\u0158\24\0\5\u0157\33\0\10\311\1\u0159"+
    "\1\u010f\77\311\11\u0110\1\u015a\77\u0110\5\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\12\14\1\u015b\20\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\1\u015c\32\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\5\14"+
    "\1\u015d\25\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\7\14\1\u015e\23\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\4\14\1\u015f\26\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\11\14\1\u0160\21\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\3\14"+
    "\1\u0161\27\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\21\14\1\u0162\11\14\35\0\3\14\2\0\6\14"+
    "\1\u0163\1\14\1\0\1\14\2\0\6\14\1\u0164\6\14"+
    "\1\u0165\15\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\1\14\1\u0166\31\14\35\0\3\14\2\0\6\14"+
    "\1\u0167\1\14\1\0\1\14\2\0\33\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\22\14\1\u0168\10\14"+
    "\35\0\3\14\2\0\1\u0169\7\14\1\0\1\14\2\0"+
    "\13\14\1\u016a\7\14\1\u016b\1\u016c\1\u016d\5\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\13\14\1\u016e"+
    "\17\14\35\0\3\14\2\0\10\14\1\0\1\14\2\0"+
    "\4\14\1\u016f\26\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\4\14\1\u0170\26\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\u0171\2\0\1\u0172\32\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\5\14\1\u0173\25\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\1\14"+
    "\1\u0174\31\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\11\14\1\u0175\21\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\u0176\2\0\33\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\12\14\1\u0177\20\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\7\14\1\u0178\23\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\11\14"+
    "\1\u0179\21\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\17\14\1\u017a\13\14\35\0\3\14\2\0\6\14"+
    "\1\u017b\1\14\1\0\1\14\2\0\33\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\7\14\1\u017c\23\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\11\14"+
    "\1\u017d\21\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\1\u017e\32\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\6\14\1\u017f\24\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\14\14\1\u0180\16\14\35\0"+
    "\3\14\2\0\5\14\1\u0181\2\14\1\0\1\14\2\0"+
    "\33\14\35\0\3\14\2\0\10\14\1\0\1\14\2\0"+
    "\24\14\1\u0182\6\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\1\14\1\u0183\31\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\27\14\1\u0184\3\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\26\14\1\u0185"+
    "\4\14\35\0\3\14\2\0\10\14\1\0\1\14\2\0"+
    "\1\14\1\u0186\31\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\11\14\1\u0187\21\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\30\14\1\u0188\2\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\6\14\1\u0189"+
    "\24\14\35\0\3\14\2\0\10\14\1\0\1\14\2\0"+
    "\5\14\1\u018a\25\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\2\14\1\u018b\30\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\13\14\1\u018c\17\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\1\u018d\32\14"+
    "\35\0\3\14\2\0\6\14\1\u018e\1\14\1\0\1\14"+
    "\2\0\33\14\35\0\3\14\2\0\10\14\1\0\1\u018f"+
    "\2\0\33\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\4\14\1\u0190\26\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\11\14\1\u0191\21\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\4\14\1\u0192\26\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\u0193\2\0\33\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\1\u0194"+
    "\32\14\35\0\3\14\2\0\10\14\1\0\1\14\2\0"+
    "\4\14\1\u0195\26\14\35\0\3\14\2\0\5\14\1\u0196"+
    "\2\14\1\0\1\14\2\0\33\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\2\14\1\u0197\30\14\35\0"+
    "\1\u0157\4\0\2\u0157\1\0\1\u0157\33\0\5\u0157\33\0"+
    "\10\u0110\1\u0111\1\u015a\77\u0110\5\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\11\14\1\u0198\21\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\5\14\1\u0199\25\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\1\u019a"+
    "\32\14\35\0\3\14\2\0\10\14\1\0\1\14\2\0"+
    "\1\u019b\32\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\7\14\1\u019c\23\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\3\14\1\u019d\27\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\u019e\2\0\33\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\u019f\2\0\33\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\13\14\1\u01a0\17\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\13\14"+
    "\1\u01a1\17\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\24\14\1\u01a2\6\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\27\14\1\u01a3\3\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\26\14\1\u01a4\4\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\7\14"+
    "\1\u01a5\23\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\1\14\1\u01a6\31\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\13\14\1\u01a7\17\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\4\14\1\u01a8\4\14"+
    "\1\u01a9\21\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\5\14\1\u01aa\25\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\1\u01ab\32\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\1\14\1\u01ac\31\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\15\14\1\u01ad"+
    "\15\14\35\0\3\14\2\0\10\14\1\0\1\14\2\0"+
    "\1\u01ae\32\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\7\14\1\u01af\23\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\3\14\1\u01b0\27\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\14\14\1\u01b1\16\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\13\14"+
    "\1\u01b2\17\14\35\0\3\14\2\0\6\14\1\u01b3\1\14"+
    "\1\0\1\14\2\0\33\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\1\u01b4\32\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\3\14\1\u01b5\27\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\1\u01b6\32\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\7\14"+
    "\1\u01b7\23\14\35\0\3\14\2\0\10\14\1\0\1\u01b8"+
    "\2\0\33\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\17\14\1\u01b9\13\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\u01ba\2\0\33\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\5\14\1\u01bb\25\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\u01bc\2\0\33\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\u01bd\2\0\33\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\15\14\1\u01be\15\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\7\14"+
    "\1\u01bf\23\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\1\u01c0\32\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\7\14\1\u01c1\23\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\22\14\1\u01c2\10\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\11\14\1\u01c3"+
    "\21\14\35\0\3\14\2\0\10\14\1\0\1\14\2\0"+
    "\13\14\1\u01c4\17\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\4\14\1\u01c5\26\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\4\14\1\u01c6\26\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\13\14\1\u01c7"+
    "\17\14\35\0\3\14\2\0\10\14\1\0\1\14\2\0"+
    "\4\14\1\u01c8\26\14\35\0\3\14\2\0\6\14\1\u01c9"+
    "\1\14\1\0\1\14\2\0\33\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\11\14\1\u01ca\21\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\1\u01cb\32\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\3\14"+
    "\1\u01cc\27\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\5\14\1\u01cd\25\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\14\14\1\u01ce\16\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\15\14\1\u01cf\15\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\2\14"+
    "\1\u01d0\30\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\22\14\1\u01d1\10\14\35\0\3\14\2\0\6\14"+
    "\1\u01d2\1\14\1\0\1\14\2\0\33\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\20\14\1\u01d3\12\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\u01d4\2\0\33\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\2\14"+
    "\1\u01d5\30\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\3\14\1\u01d6\27\14\35\0\3\14\2\0\6\14"+
    "\1\u01d7\1\14\1\0\1\14\2\0\33\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\4\14\1\u01d8\26\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\11\14"+
    "\1\u01d9\21\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\4\14\1\u01da\26\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\1\u01db\32\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\15\14\1\u01dc\15\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\16\14\1\u01dd"+
    "\14\14\35\0\3\14\2\0\10\14\1\0\1\14\2\0"+
    "\1\u01de\32\14\35\0\3\14\2\0\10\14\1\0\1\u01df"+
    "\2\0\33\14\35\0\3\14\2\0\10\14\1\0\1\u01e0"+
    "\2\0\33\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\5\14\1\u01e1\25\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\1\u01e2\32\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\6\14\1\u01e3\24\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\5\14\1\u01e4"+
    "\25\14\35\0\3\14\2\0\4\14\1\u01e5\3\14\1\0"+
    "\1\14\2\0\33\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\1\14\1\u01e6\31\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\1\u01e7\32\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\20\14\1\u01e8\12\14"+
    "\35\0\3\14\2\0\10\14\1\0\1\14\2\0\16\14"+
    "\1\u01e9\14\14\35\0\3\14\2\0\10\14\1\0\1\14"+
    "\2\0\13\14\1\u01ea\17\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\u01eb\2\0\33\14\35\0\3\14\2\0\10\14"+
    "\1\0\1\14\2\0\7\14\1\u01ec\23\14\35\0\3\14"+
    "\2\0\10\14\1\0\1\14\2\0\1\u01ed\32\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\7\14\1\u01ee"+
    "\23\14\35\0\3\14\2\0\10\14\1\0\1\14\2\0"+
    "\4\14\1\u01ef\26\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\u01f0\2\0\33\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\u01f1\2\0\33\14\35\0\3\14\2\0\10\14\1\0"+
    "\1\14\2\0\5\14\1\u01f2\25\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\u01f3\2\0\33\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\u01f4\2\0\33\14\35\0\3\14\2\0"+
    "\10\14\1\0\1\14\2\0\17\14\1\u01f5\13\14\35\0"+
    "\3\14\2\0\10\14\1\0\1\14\2\0\15\14\1\u01f6"+
    "\15\14\35\0\3\14\2\0\10\14\1\0\1\u01f7\2\0"+
    "\33\14\35\0\3\14\2\0\5\14\1\u01f8\2\14\1\0"+
    "\1\14\2\0\33\14\35\0\3\14\2\0\5\14\1\u01f9"+
    "\2\14\1\0\1\14\2\0\33\14\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24382];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\16\1\1\11\31\1\11\11\1\1\3\11"+
    "\1\1\1\11\47\1\1\11\1\1\2\11\1\1\1\11"+
    "\1\1\3\11\1\0\3\1\1\0\2\1\2\11\14\1"+
    "\2\11\52\1\1\11\1\0\2\1\5\11\1\1\1\11"+
    "\1\1\6\11\3\1\1\0\1\11\10\1\1\11\71\1"+
    "\3\11\1\1\2\0\1\1\1\11\104\1\1\11\1\1"+
    "\1\0\1\11\1\0\237\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[505];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public int sc_ctrlchar = '\\';
  public boolean sc_needsemicolon = false;

  public _SpLexer() {
    super((java.io.Reader) null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _ApLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case STRING: {
              return packed ? PACKED_STRING_LITERAL : STRING_LITERAL;
            }
            case 506: break;
            case RAW_STRING: {
              return packed ? PACKED_RAW_STRING_LITERAL : RAW_STRING_LITERAL;
            }
            case 507: break;
            case CHARACTER: {
              return CHARACTER_LITERAL;
            }
            case 508: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { if (yycharat(0) == sc_ctrlchar) {
                          yybegin(HARD_STRING);
                        } else {
                          return BAD_CHARACTER;
                        }
            }
          case 162: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 163: break;
          case 3: 
            { return CELL_LITERAL;
            }
          case 164: break;
          case 4: 
            { return AT;
            }
          case 165: break;
          case 5: 
            { return IDENTIFIER;
            }
          case 166: break;
          case 6: 
            { return DIV;
            }
          case 167: break;
          case 7: 
            { return ASTERISK;
            }
          case 168: break;
          case 8: 
            { return UNDER;
            }
          case 169: break;
          case 9: 
            { return DOT;
            }
          case 170: break;
          case 10: 
            { return MINUS;
            }
          case 171: break;
          case 11: 
            { yybegin(PREPROCESSOR);
            }
          case 172: break;
          case 12: 
            { return EQ;
            }
          case 173: break;
          case 13: 
            { return EXCL;
            }
          case 174: break;
          case 14: 
            { return OR;
            }
          case 175: break;
          case 15: 
            { return PLUS;
            }
          case 176: break;
          case 16: 
            { return LT;
            }
          case 177: break;
          case 17: 
            { return GT;
            }
          case 178: break;
          case 18: 
            { return AND;
            }
          case 179: break;
          case 19: 
            { return XOR;
            }
          case 180: break;
          case 20: 
            { return PERC;
            }
          case 181: break;
          case 21: 
            { return LPARENTH;
            }
          case 182: break;
          case 22: 
            { return RPARENTH;
            }
          case 183: break;
          case 23: 
            { return LBRACE;
            }
          case 184: break;
          case 24: 
            { return RBRACE;
            }
          case 185: break;
          case 25: 
            { return LBRACKET;
            }
          case 186: break;
          case 26: 
            { return RBRACKET;
            }
          case 187: break;
          case 27: 
            { return COMMA;
            }
          case 188: break;
          case 28: 
            { return TILDE;
            }
          case 189: break;
          case 29: 
            { return QUEST;
            }
          case 190: break;
          case 30: 
            { return COLON;
            }
          case 191: break;
          case 31: 
            { return SEMICOLON;
            }
          case 192: break;
          case 32: 
            { yybegin(STRING); packed = false;
            }
          case 193: break;
          case 33: 
            { 
            }
          case 194: break;
          case 34: 
            { return PREPROCESSOR_DIRECTIVE;
            }
          case 195: break;
          case 35: 
            { yypushback(1); return packed ? PACKED_STRING_LITERAL : STRING_LITERAL;
            }
          case 196: break;
          case 36: 
            { return packed ? PACKED_STRING_LITERAL : STRING_LITERAL;
            }
          case 197: break;
          case 37: 
            { return packed ? PACKED_RAW_STRING_LITERAL : RAW_STRING_LITERAL;
            }
          case 198: break;
          case 38: 
            { yybegin(YYINITIAL); yypushback(yylength()); return BAD_CHARACTER;
            }
          case 199: break;
          case 39: 
            { yybegin(RAW_STRING); packed = false;
            }
          case 200: break;
          case 40: 
            { yypushback(1); return CHARACTER_LITERAL;
            }
          case 201: break;
          case 41: 
            { return CHARACTER_LITERAL;
            }
          case 202: break;
          case 42: 
            { return ESCAPING_SLASH;
            }
          case 203: break;
          case 43: 
            { return END_OF_LINE_COMMENT;
            }
          case 204: break;
          case 44: 
            { return C_STYLE_COMMENT;
            }
          case 205: break;
          case 45: 
            { return DIVEQ;
            }
          case 206: break;
          case 46: 
            { return ASTERISKEQ;
            }
          case 207: break;
          case 47: 
            { return RANGE;
            }
          case 208: break;
          case 48: 
            { return MINUSMINUS;
            }
          case 209: break;
          case 49: 
            { return MINUSEQ;
            }
          case 210: break;
          case 50: 
            { return AS_KEYWORD;
            }
          case 211: break;
          case 51: 
            { return IF_KEYWORD;
            }
          case 212: break;
          case 52: 
            { return IN_KEYWORD;
            }
          case 213: break;
          case 53: 
            { return DO_KEYWORD;
            }
          case 214: break;
          case 54: 
            { return EQEQ;
            }
          case 215: break;
          case 55: 
            { return NE;
            }
          case 216: break;
          case 56: 
            { yybegin(STRING); packed = true;
            }
          case 217: break;
          case 57: 
            { return OREQ;
            }
          case 218: break;
          case 58: 
            { return OROR;
            }
          case 219: break;
          case 59: 
            { return PLUSEQ;
            }
          case 220: break;
          case 60: 
            { return PLUSPLUS;
            }
          case 221: break;
          case 61: 
            { return LE;
            }
          case 222: break;
          case 62: 
            { return LTLT;
            }
          case 223: break;
          case 63: 
            { return GE;
            }
          case 224: break;
          case 64: 
            { return GTGT;
            }
          case 225: break;
          case 65: 
            { return ANDEQ;
            }
          case 226: break;
          case 66: 
            { return ANDAND;
            }
          case 227: break;
          case 67: 
            { return XOREQ;
            }
          case 228: break;
          case 68: 
            { return PERCEQ;
            }
          case 229: break;
          case 69: 
            { return COLONCOLON;
            }
          case 230: break;
          case 70: 
            { if (yycharat(0) != sc_ctrlchar) {
                          yypushback(1);
                        }
            }
          case 231: break;
          case 71: 
            { yybegin(RAW_STRING); packed = true;
            }
          case 232: break;
          case 72: 
            { return RATIONAL_LITERAL;
            }
          case 233: break;
          case 73: 
            { return DOC_COMMENT;
            }
          case 234: break;
          case 74: 
            { return ELLIPSIS;
            }
          case 235: break;
          case 75: 
            { return TRY_KEYWORD;
            }
          case 236: break;
          case 76: 
            { return FOR_KEYWORD;
            }
          case 237: break;
          case 77: 
            { return LET_KEYWORD;
            }
          case 238: break;
          case 78: 
            { return INT_KEYWORD;
            }
          case 239: break;
          case 79: 
            { return NEW_KEYWORD;
            }
          case 240: break;
          case 80: 
            { return VAR_KEYWORD;
            }
          case 241: break;
          case 81: 
            { if (yycharat(1) == sc_ctrlchar) {
                          yybegin(RAW_STRING);
                          packed = true;
                        } else {
                          yypushback(2);
                          return EXCL;
                       }
            }
          case 242: break;
          case 82: 
            { return LTLTEQ;
            }
          case 243: break;
          case 83: 
            { return GTGTEQ;
            }
          case 244: break;
          case 84: 
            { return GTGTGT;
            }
          case 245: break;
          case 85: 
            { return EXIT_KEYWORD;
            }
          case 246: break;
          case 86: 
            { return ELSE_KEYWORD;
            }
          case 247: break;
          case 87: 
            { return ENUM_KEYWORD;
            }
          case 248: break;
          case 88: 
            { return BOOLEAN_LITERAL;
            }
          case 249: break;
          case 89: 
            { return THIS_KEYWORD;
            }
          case 250: break;
          case 90: 
            { return CASE_KEYWORD;
            }
          case 251: break;
          case 91: 
            { return CHAR_KEYWORD;
            }
          case 252: break;
          case 92: 
            { return INTN_KEYWORD;
            }
          case 253: break;
          case 93: 
            { return INT8_KEYWORD;
            }
          case 254: break;
          case 94: 
            { return NULL_KEYWORD;
            }
          case 255: break;
          case 95: 
            { return DECL_KEYWORD;
            }
          case 256: break;
          case 96: 
            { return WITH_KEYWORD;
            }
          case 257: break;
          case 97: 
            { return GOTO_KEYWORD;
            }
          case 258: break;
          case 98: 
            { return VOID_KEYWORD;
            }
          case 259: break;
          case 99: 
            { return GTGTGTEQ;
            }
          case 260: break;
          case 100: 
            { return BREAK_KEYWORD;
            }
          case 261: break;
          case 101: 
            { return TAGOF_KEYWORD;
            }
          case 262: break;
          case 102: 
            { return THROW_KEYWORD;
            }
          case 263: break;
          case 103: 
            { return USING_KEYWORD;
            }
          case 264: break;
          case 104: 
            { return UINTN_KEYWORD;
            }
          case 265: break;
          case 105: 
            { return UINT8_KEYWORD;
            }
          case 266: break;
          case 106: 
            { return UNION_KEYWORD;
            }
          case 267: break;
          case 107: 
            { return STOCK_KEYWORD;
            }
          case 268: break;
          case 108: 
            { return SLEEP_KEYWORD;
            }
          case 269: break;
          case 109: 
            { return CONST_KEYWORD;
            }
          case 270: break;
          case 110: 
            { return CATCH_KEYWORD;
            }
          case 271: break;
          case 111: 
            { return INT16_KEYWORD;
            }
          case 272: break;
          case 112: 
            { return INT64_KEYWORD;
            }
          case 273: break;
          case 113: 
            { return INT32_KEYWORD;
            }
          case 274: break;
          case 114: 
            { return WHILE_KEYWORD;
            }
          case 275: break;
          case 115: 
            { return OBJECT_KEYWORD;
            }
          case 276: break;
          case 116: 
            { return TYPEOF_KEYWORD;
            }
          case 277: break;
          case 117: 
            { return RETURN_KEYWORD;
            }
          case 278: break;
          case 118: 
            { return UINT16_KEYWORD;
            }
          case 279: break;
          case 119: 
            { return UINT64_KEYWORD;
            }
          case 280: break;
          case 120: 
            { return UINT32_KEYWORD;
            }
          case 281: break;
          case 121: 
            { return ASSERT_KEYWORD;
            }
          case 282: break;
          case 122: 
            { return SEALED_KEYWORD;
            }
          case 283: break;
          case 123: 
            { return STRUCT_KEYWORD;
            }
          case 284: break;
          case 124: 
            { return STATIC_KEYWORD;
            }
          case 285: break;
          case 125: 
            { return SIZEOF_KEYWORD;
            }
          case 286: break;
          case 126: 
            { return SWITCH_KEYWORD;
            }
          case 287: break;
          case 127: 
            { return IMPORT_KEYWORD;
            }
          case 288: break;
          case 128: 
            { return NATIVE_KEYWORD;
            }
          case 289: break;
          case 129: 
            { return DOUBLE_KEYWORD;
            }
          case 290: break;
          case 130: 
            { return DELETE_KEYWORD;
            }
          case 291: break;
          case 131: 
            { return PUBLIC_KEYWORD;
            }
          case 292: break;
          case 132: 
            { return BUILTIN_KEYWORD;
            }
          case 293: break;
          case 133: 
            { return TYPESET_KEYWORD;
            }
          case 294: break;
          case 134: 
            { return TYPEDEF_KEYWORD;
            }
          case 295: break;
          case 135: 
            { return FOREACH_KEYWORD;
            }
          case 296: break;
          case 136: 
            { return FORWARD_KEYWORD;
            }
          case 297: break;
          case 137: 
            { return FUNCTAG_KEYWORD;
            }
          case 298: break;
          case 138: 
            { return FINALLY_KEYWORD;
            }
          case 299: break;
          case 139: 
            { return AQUIRE_KEYWORD;
            }
          case 300: break;
          case 140: 
            { return CELLSOF_KEYWORD;
            }
          case 301: break;
          case 141: 
            { return CAST_TO_KEYWORD;
            }
          case 302: break;
          case 142: 
            { return DEFAULT_KEYWORD;
            }
          case 303: break;
          case 143: 
            { return DEFINED_KEYWORD;
            }
          case 304: break;
          case 144: 
            { return PRIVATE_KEYWORD;
            }
          case 305: break;
          case 145: 
            { return PACKAGE_KEYWORD;
            }
          case 306: break;
          case 146: 
            { return VARIANT_KEYWORD;
            }
          case 307: break;
          case 147: 
            { return VIEW_AS_KEYWORD;
            }
          case 308: break;
          case 148: 
            { return VIRTUAL_KEYWORD;
            }
          case 309: break;
          case 149: 
            { return OPERATOR_KEYWORD;
            }
          case 310: break;
          case 150: 
            { return EXPLICIT_KEYWORD;
            }
          case 311: break;
          case 151: 
            { return READONLY_KEYWORD;
            }
          case 312: break;
          case 152: 
            { return FUNCENUM_KEYWORD;
            }
          case 313: break;
          case 153: 
            { return FUNCTION_KEYWORD;
            }
          case 314: break;
          case 154: 
            { return CONTINUE_KEYWORD;
            }
          case 315: break;
          case 155: 
            { return IMPLICIT_KEYWORD;
            }
          case 316: break;
          case 156: 
            { return VOLATILE_KEYWORD;
            }
          case 317: break;
          case 157: 
            { return INTERFACE_KEYWORD;
            }
          case 318: break;
          case 158: 
            { return NAMESPACE_KEYWORD;
            }
          case 319: break;
          case 159: 
            { return METHODMAP_KEYWORD;
            }
          case 320: break;
          case 160: 
            { return PROTECTED_KEYWORD;
            }
          case 321: break;
          case 161: 
            { return NULLABLE_KEYWORD;
            }
          case 322: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
