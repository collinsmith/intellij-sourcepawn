buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
    }
}

plugins {
    id 'org.jetbrains.intellij' version '0.2.18'
}

sourceSets {
    main {
        java.srcDirs 'src/main/java', 'src/main/gen'
        java.exclude 'net/alliedmods/lang/sourcepawn/psi.old/**'
        resources.srcDirs 'src/main/resources'
    }
    test {
        java.srcDirs 'src/test/java'
    }
}

version "${version}"

allprojects {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:deprecation"
    }

    tasks.withType(Test) {
        useJUnit {
            include '**/**/*Test.*' // any Java or Kotlin class that ends with 'Test'
        }

        testLogging {
            beforeSuite { suite ->
                if (!suite.parent) { // will match the outermost suite
                    logger.lifecycle ' ----------- Building Tests -----------'
                } else if (suite.className != null) {
                    logger.lifecycle "${suite.className}:"
                }
            }

            afterTest { descriptor, result ->
                switch (result.resultType) {
                    case 'SUCCESS':
                    case 'PASSED':
                        logger.info(" {} {}", Os.isFamily(Os.FAMILY_WINDOWS)? "√":"✔", descriptor.name)
                        break
                    case TestResult.ResultType.SKIPPED.name():
                        logger.warn(" {} {}", Os.isFamily(Os.FAMILY_WINDOWS)? "!":"⛔", descriptor.name)
                        break
                    case TestResult.ResultType.FAILURE.name():
                        logger.error(" {} {}", Os.isFamily(Os.FAMILY_WINDOWS)? "×":"✘", descriptor.name)
                        break
                    default:
                        logger.lifecycle(" ? {} {}", descriptor.name, result.resultType)
                }
            }

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength) + '\n')
                }
            }
        }
    }

    // take the version number defined in gradle build and use that in plugin.xml
    task initConfig(type: Copy) {
        from('src/main/resources') {
            include '**/plugin.xml'
            filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [version: version])
        }
    }

    apply plugin: 'org.jetbrains.intellij'
    intellij {
        pluginName 'intellij-sourcepawn'
        version ideaVersion
        updateSinceUntilBuild false

//      publishPlugin {
//          username System.getenv('SB_JETBRAINS_USERNAME')
//          password System.getenv('SB_JETBRAINS_PASSWORD')
//          channels publishChannels
//      }
    }

    task testCompilation(type: Test, group: 'Verification', dependsOn: [classes, testClasses]) {
        useJUnit {
            include 'net/alliedmods/lang/sourcepawn/build/**'
        }
        testLogging {
            exceptionFormat = 'full'
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/com.google.guava/guava
    compile group: 'com.google.guava', name: 'guava', version: '20.0'
}

apply plugin: 'idea'
idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
    module {
        generatedSourceDirs += file('gen')

    }
}

prepareSandbox {
    copy {
        from System.getProperty("user.home") + '/.IdeaIC2017.3/config/plugins/psiviewer'
        into './build/idea-sandbox/plugins/'
    }
}
